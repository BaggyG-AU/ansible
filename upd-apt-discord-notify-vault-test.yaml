---
- hosts: all
  gather_facts: true
  become: true
  become_user: root
  serial: 1  # Ensures the playbook runs on one server at a time
  vars:
    semphore_directory: "/home/semaphore"
    update_results_file: "/home/semaphore/automation-updates.txt"
#Encrypt you discord webhook url with anisble-vault    
    discord_webhook_url: !vault |
          $ANSIBLE_VAULT;1.1;AES256
          38343065313532623738393139613235396639383662373333623061396466653364653834356430
          3437373936356264633137336338623566343938376134650a623232616666386339333130653436
          31633332303130663866396139653161616630303139393665303834346631643730343936316235
          3962373162303932640a613730383563383666666535376663376137336163393734366562636465
          38373165353935343365663730343533663132333363336132643831636266376464333332633765
          64653534323833366437383930333535316265393135306666383430663331633333626239613637
          39306233613966626365346465373937323038373134646132353165346535333965346461303131
          61313762346562653833613865306439323735656337356332343664656434366435613864653861
          39623237333837336665643835323039316564663230306138653238396461616361643731383930
          3038323831383739643137313566613662623736313731626334
    ansible_command_timeout: 900
            
  tasks:
    - name: Send Discord message that playbook is running
      uri:
        url: "{{ discord_webhook_url }}"
        method: POST
        body_format: json
        # Using ** for bold
        body: '{"content": "**Update running on {{ inventory_hostname }} **"}'
        headers:
         Content-Type: "application/json"
        status_code: 204
      register: discord_playbook_running
      
    - name: Check for the existence of semaphore directory on remote hosts
      stat:
        path: "{{ semphore_directory }}"
      register: semaphore_directory_check
      
    - name: Create semaphore directory if it is absent
      file:
        path: /home/semaphore
        state: directory
        mode: 0755
        group: root
        owner: root
      when: semaphore_directory_check.stat.exists == false
    
    - name: Check for the existence of update results file on remote hosts
      stat:
        path: "{{ update_results_file }}"
      register: update_results_file_stat

    - name: Delete existing update results file on remote hosts
      file:
        path: "{{ update_results_file }}"
        state: absent
      when: update_results_file_stat.stat.exists

    - name: Create/update automation-updates.txt file on remote hosts
      ansible.builtin.copy:
        content: ""
        dest: /home/semaphore/automation-updates.txt

    - name: Run updates on remote hosts
      apt:
        update_cache: yes
      register: apt_update
    
    - name: Check if there are any available updates
      shell: apt list --upgradable | grep -v 'Listing...' | wc -l
      register: update_count
      changed_when: false
    
    - name: Send Discord message when no update is required
      uri:
        url: "{{ discord_webhook_url }}"
        method: POST
        body_format: json
        headers:
          Content-Type: "application/json"
        #Using ini markdown format for green text
        body: '{"content": "```diff\n+ No updates avaialble for {{ inventory_hostname }}\n```"}'
        status_code: 204
      when: update_count.stdout | int == 0
      register: discord_result_nochange

    - name: Run upgrades on remote hosts
      apt:      
        upgrade: safe
        autoremove: yes
        autoclean: yes
      register: apt_upgrade
      when: update_count.stdout | int != 0

    - name: Capture update results on remote hosts
      lineinfile:
        path: "{{ update_results_file }}"
        line: "{{ inventory_hostname }} - Update {{ 'succeeded' if apt_upgrade.changed else 'failed' }}"
      when: apt_upgrade.changed or apt_upgrade.failed

    - name: Send Discord message on update success on remote hosts
      uri:
        url: "{{ discord_webhook_url }}"
        method: POST
        body_format: json
        headers:
          Content-Type: "application/json"
        body: '{"content": "```diff\n+Update succeeded on {{ inventory_hostname }}\n```"}'
        status_code: 204
      when: apt_upgrade.changed
      register: discord_result_success
      
    - name: Send Discord message on update failure on remote hosts
      uri:
        url: "{{ discord_webhook_url }}"
        method: POST
        body_format: json
        headers:
          Content-Type: "application/json"
        #Using JSON markdown for red text
        body: '{"content": "```json\nUpdate failed on {{ inventory_hostname }}\n```"}'
        status_code: 204
      when: apt_upgrade.failed
      register: discord_result_failure
      
    - name: Check if remote host reboot is required
      become: true
      ansible.builtin.stat:
        path: /var/run/reboot-required
      register: reboot_required
      
    - name: Send Discord message if remote host requires reboot
      uri:
        url: "{{ discord_webhook_url }}"
        method: POST
        body_format: json
        headers:
          Content-Type: "application/json"
        #Using JSON markdown for red text
        body: '{"content": "```json\n{{ inventory_hostname }} requires reboot\n```"}'
        status_code: 204
      when: reboot_required.stat.exists
      register: discord_result_failure_local

#    - name: Fail the playbook on Discord message failure on local host (failure)
#      fail:
#        msg: "Failed to send Discord message on failure: {{ discord_result_failure_local.msg }}"
#      when: discord_result_failure_local.status != 200